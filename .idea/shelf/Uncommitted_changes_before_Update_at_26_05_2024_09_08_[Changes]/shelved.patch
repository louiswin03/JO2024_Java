Index: src/main/java/fr/isep/algo/projetjo/controller/EventController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.isep.algo.projetjo.controller;\r\n\r\nimport fr.isep.algo.projetjo.dao.eventDAO;\r\nimport fr.isep.algo.projetjo.model.Event;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.control.TextField;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Date;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\n\r\npublic class eventController extends dashboardController {\r\n    @FXML\r\n    private ListView<Event> eventListView;\r\n    @FXML\r\n    private TextField nameField;\r\n    @FXML\r\n    private TextField locationField;\r\n    @FXML\r\n    private TextField dateField;\r\n    @FXML\r\n    private TextField sportNameField;\r\n\r\n    private eventDAO eventDAO;\r\n    private ObservableList<Event> eventList;\r\n\r\n    public void initialize(Connection connection) {\r\n        eventDAO = new eventDAO(); // Assuming the eventDAO methods are static as in athleteDAO\r\n        loadEvents();\r\n    }\r\n\r\n    private void loadEvents() {\r\n        try {\r\n            eventList = FXCollections.observableArrayList(eventDAO.getAllEvents());\r\n            eventListView.setItems(eventList);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Database Error\", \"Unable to load events from the database.\");\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleAddEvent() {\r\n        String dateString = dateField.getText();\r\n        String sportName = sportNameField.getText(); // Assurez-vous de changer sportIdField en sportNameField\r\n        if (isValidDate(dateString)) {\r\n            try {\r\n                int sportId = eventDAO.getSportIdByName(sportName); // Utilisez la méthode pour obtenir l'ID du sport\r\n                if (sportId != -1) { // Vérifiez si l'ID du sport est valide (-1 indique une absence de correspondance)\r\n                    Event event = new Event(\r\n                            0,\r\n                            sportId, // Utilisez l'ID du sport obtenu\r\n                            nameField.getText(),\r\n                            locationField.getText(),\r\n                            Date.valueOf(dateString)\r\n                    );\r\n                    eventDAO.addEvent(event);\r\n                    loadEvents();\r\n                    nameField.clear();\r\n                    locationField.clear();\r\n                    dateField.clear();\r\n                    sportNameField.clear();\r\n                } else {\r\n                    showAlert(\"Invalid Sport Name\", \"Please enter a valid sport name.\");\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                showAlert(\"Database Error\", \"Unable to add the event to the database.\");\r\n            }\r\n        } else {\r\n            showAlert(\"Invalid Date Format\", \"Please enter the date in the format yyyy-MM-dd.\");\r\n        }\r\n    }\r\n\r\n\r\n    @FXML\r\n    private void handleUpdateEvent() {\r\n        String dateString = dateField.getText();\r\n        String sportName = sportNameField.getText(); // Assurez-vous de changer sportIdField en sportNameField\r\n        if (isValidDate(dateString)) {\r\n            try {\r\n                Event selectedEvent = eventListView.getSelectionModel().getSelectedItem();\r\n                if (selectedEvent != null) {\r\n                    int sportId = eventDAO.getSportIdByName(sportName); // Utilisez la méthode pour obtenir l'ID du sport\r\n                    if (sportId != -1) { // Vérifiez si l'ID du sport est valide (-1 indique une absence de correspondance)\r\n                        selectedEvent.setSport(sportId);\r\n                        selectedEvent.setName(nameField.getText());\r\n                        selectedEvent.setLocation(locationField.getText());\r\n                        selectedEvent.setDate(Date.valueOf(dateString));\r\n                        eventDAO.updateEvent(selectedEvent);\r\n                        loadEvents();\r\n                        showAlert(\"Evènement ajouté avec succès\", \"Evènement ajouté avec succès !\");\r\n                    } else {\r\n                        showAlert(\"Invalid Sport Name\", \"Please enter a valid sport name.\");\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                showAlert(\"Erreur BDD\", \"Unable to update the event in the database.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteEvent() {\r\n        try {\r\n            Event selectedEvent = eventListView.getSelectionModel().getSelectedItem();\r\n            if (selectedEvent != null) {\r\n                eventDAO.deleteEvent(selectedEvent.getId());\r\n                loadEvents();\r\n            } else {\r\n                showAlert(\"No Selection\", \"Please select an event to delete.\");\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Database Error\", \"Unable to delete the event from the database.\");\r\n        }\r\n    }\r\n\r\n    private boolean isValidDate(String date) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n        sdf.setLenient(false);\r\n        try {\r\n            sdf.parse(date);\r\n            return true;\r\n        } catch (ParseException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(Alert.AlertType.ERROR);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    private void goBack(ActionEvent event) {\r\n\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fr/isep/algo/projetjo/view/athleteWindow.fxml\"));\r\n            Parent root = loader.load();\r\n\r\n            Scene currentScene = ((Node) event.getSource()).getScene();\r\n\r\n            currentScene.setRoot(root);\r\n\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fr/isep/algo/projetjo/controller/EventController.java b/src/main/java/fr/isep/algo/projetjo/controller/EventController.java
--- a/src/main/java/fr/isep/algo/projetjo/controller/EventController.java	
+++ b/src/main/java/fr/isep/algo/projetjo/controller/EventController.java	
@@ -1,7 +1,11 @@
 package fr.isep.algo.projetjo.controller;
 
+import fr.isep.algo.projetjo.dao.athleteDAO;
 import fr.isep.algo.projetjo.dao.eventDAO;
+import fr.isep.algo.projetjo.dao.event_athletesDAO;
+import fr.isep.algo.projetjo.model.Athlete;
 import fr.isep.algo.projetjo.model.Event;
+import javafx.beans.property.SimpleStringProperty;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.event.ActionEvent;
@@ -10,18 +14,22 @@
 import javafx.scene.Node;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
-import javafx.scene.control.Alert;
-import javafx.scene.control.ListView;
-import javafx.scene.control.TextField;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
+
+import java.time.LocalDate;
+import java.util.List;
 
 import java.io.IOException;
-import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Date;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.stream.Collectors;
 
 public class eventController extends dashboardController {
+    @FXML
+    private ListView<String> athleteListView;
     @FXML
     private ListView<Event> eventListView;
     @FXML
@@ -36,45 +44,100 @@
     private eventDAO eventDAO;
     private ObservableList<Event> eventList;
 
-    public void initialize(Connection connection) {
-        eventDAO = new eventDAO(); // Assuming the eventDAO methods are static as in athleteDAO
-        loadEvents();
-    }
+    @FXML
+    private TableView<Event> eventTableView;
+    @FXML
+    private TableColumn<Event, Integer> eventIdColumn;
+    @FXML
+    private TableColumn<Event, String> sportNameColumn;
+    @FXML
+    private TableColumn<Event, String> eventNameColumn;
+    @FXML
+    private TableColumn<Event, String> eventLocationColumn;
+    @FXML
+    private TableColumn<Event, LocalDate> eventDateColumn;
+    @FXML
+    private TableColumn<Event, String> athletesColumn;
+
+    @FXML
+    private void initialize() {
 
-    private void loadEvents() {
+        eventIdColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
+        sportNameColumn.setCellValueFactory(new PropertyValueFactory<>("sportName"));
+        eventNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
+        eventLocationColumn.setCellValueFactory(new PropertyValueFactory<>("location"));
+        eventDateColumn.setCellValueFactory(new PropertyValueFactory<>("date"));
+
+        athletesColumn.setCellValueFactory(cellData -> {
+            Event event = cellData.getValue();
+            List<Athlete> athletes = event.getAthletes();
+            String athleteNames = athletes.stream()
+                    .map(Athlete::getNom)
+                    .collect(Collectors.joining(", "));
+            return new SimpleStringProperty(athleteNames);
+        });
+
+        eventDAO = new eventDAO();
         try {
-            eventList = FXCollections.observableArrayList(eventDAO.getAllEvents());
-            eventListView.setItems(eventList);
-        } catch (Exception e) {
+            loadEvents();
+            loadAthletes();
+        } catch (SQLException e) {
             e.printStackTrace();
-            showAlert("Database Error", "Unable to load events from the database.");
         }
     }
+
+    private void loadEvents() throws SQLException {
+        List<Event> events = eventDAO.getAllEvents();
+        for (Event event : events) {
+            // Récupérer le nom du sport à partir de son ID
+            String sportName = eventDAO.getSportNameById(event.getSport());
+            event.setSportName(sportName);
+
+            // Récupérer les athlètes associés
+            List<Athlete> athletes = event_athletesDAO.getAthletesByEventId(event.getId());
+            event.setAthletes(athletes); // Assurez-vous d'avoir un attribut `athletes` dans votre classe Event
+        }
+        eventList = FXCollections.observableArrayList(events);
+
+        // Remplacez eventListView par un TableView
+        eventTableView.setItems(eventList);
+    }
+
+    private void loadAthletes() {
+        List<Athlete> athletes = athleteDAO.getAllAthletes();
+        ObservableList<String> athleteNames = FXCollections.observableArrayList();
+        for (Athlete athlete : athletes) {
+            athleteNames.add(athlete.getNom());
+        }
+        athleteListView.setItems(athleteNames);
+
+        // Configurez la sélection multiple
+        athleteListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
+    }
 
     @FXML
     private void handleAddEvent() {
         String dateString = dateField.getText();
-        String sportName = sportNameField.getText(); // Assurez-vous de changer sportIdField en sportNameField
+        String sportName = sportNameField.getText();
         if (isValidDate(dateString)) {
             try {
-                int sportId = eventDAO.getSportIdByName(sportName); // Utilisez la méthode pour obtenir l'ID du sport
-                if (sportId != -1) { // Vérifiez si l'ID du sport est valide (-1 indique une absence de correspondance)
-                    Event event = new Event(
-                            0,
-                            sportId, // Utilisez l'ID du sport obtenu
-                            nameField.getText(),
-                            locationField.getText(),
-                            Date.valueOf(dateString)
-                    );
-                    eventDAO.addEvent(event);
-                    loadEvents();
-                    nameField.clear();
-                    locationField.clear();
-                    dateField.clear();
-                    sportNameField.clear();
-                } else {
-                    showAlert("Invalid Sport Name", "Please enter a valid sport name.");
-                }
+                int sportId = eventDAO.getSportIdByName(sportName);
+                eventDAO.addEvent(sportId, nameField.getText(), locationField.getText(), Date.valueOf(dateString)); // Ajouter l'événement à la base de données
+                int eventId = eventDAO.getEventIdBySportName(sportId, nameField.getText()); // Récupérer l'ID de l'événement ajouté
+
+                // Ajouter les athlètes sélectionnés à cet événement
+                ObservableList<String> selectedAthletes = athleteListView.getSelectionModel().getSelectedItems();
+                System.out.println(selectedAthletes);
+                for (String selectedAthlete : selectedAthletes) {
+                    int athleteId = athleteDAO.getAthleteIdByName(selectedAthlete); // Récupérer l'ID de l'athlète
+                    event_athletesDAO.addAthleteToEvent(eventId, athleteId); // Ajouter l'athlète à l'événement
+                }
+
+                loadEvents();
+                nameField.clear();
+                locationField.clear();
+                dateField.clear();
+                sportNameField.clear();
             } catch (Exception e) {
                 e.printStackTrace();
                 showAlert("Database Error", "Unable to add the event to the database.");
@@ -84,17 +147,16 @@
         }
     }
 
-
     @FXML
     private void handleUpdateEvent() {
         String dateString = dateField.getText();
-        String sportName = sportNameField.getText(); // Assurez-vous de changer sportIdField en sportNameField
+        String sportName = sportNameField.getText();
         if (isValidDate(dateString)) {
             try {
                 Event selectedEvent = eventListView.getSelectionModel().getSelectedItem();
                 if (selectedEvent != null) {
-                    int sportId = eventDAO.getSportIdByName(sportName); // Utilisez la méthode pour obtenir l'ID du sport
-                    if (sportId != -1) { // Vérifiez si l'ID du sport est valide (-1 indique une absence de correspondance)
+                    int sportId = eventDAO.getSportIdByName(sportName);
+                    if (sportId != -1) {
                         selectedEvent.setSport(sportId);
                         selectedEvent.setName(nameField.getText());
                         selectedEvent.setLocation(locationField.getText());
@@ -116,7 +178,7 @@
     @FXML
     private void handleDeleteEvent() {
         try {
-            Event selectedEvent = eventListView.getSelectionModel().getSelectedItem();
+            Event selectedEvent = eventTableView.getSelectionModel().getSelectedItem();
             if (selectedEvent != null) {
                 eventDAO.deleteEvent(selectedEvent.getId());
                 loadEvents();
@@ -165,4 +227,4 @@
         }
 
     }
-}
+}
\ No newline at end of file
